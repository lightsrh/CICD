name: CI
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]  

jobs:

  # Lancement du linter, analyse le code source pour trouver bugs, erreur de syntaxe etc...
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: 🖥️ Check out the repository
      uses: actions/checkout@v4

    - name: Install flake8
      run: python -m pip install flake8

    - name: 🐧 Launching the lint
      run: |
        echo "Lint with flake8"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Lancement des test, écris dans le fichier ./app/test_app.py 
  test:
    runs-on: ubuntu-latest

    steps:
    - name: 🖥️ Check out the repository
      uses: actions/checkout@v4

    - name: 🍏 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.2'  # Version qu'on utilise

    - name: Setting up the environement
      run: |
        python -m venv .venv
        source .venv/bin/activate
    
    - name: Install the dependencies
      run: pip install -r requirements.txt

    - name: lanching the databases
      run: docker compose up --build -d
      env:
        POSTGRES_DB: city_api
        POSTGRES_USER: city_api 
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432

    - name: check dependencies
      run: | 
        echo "les trucs installé:"
        psycopg2-binary --version
        pytest --version
    
    - name: test de connection
      run: psql -U city_api -h localhost -p 5432 -d city_api -c "SELECT 1"
      env: 
        PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Launching the pytest
      run: |
        echo "Test with pytest"
        pytest

    - name: 🎉 We are done !!
      run: echo "The end"

  # container-job:
  #   # Containers must run in Linux based operating systems
  #   runs-on: ubuntu-latest
  #   # Docker Hub image that `container-job` executes in
  #   container: node:10.18-jessie

  #   # Service containers to run with `container-job`
  #   services:
  #     # Label used to access the service container
  #     postgres:
  #       # Docker Hub image
  #       image: postgres
  #       # Provide the password for postgres
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         # Maps tcp port 5432 on service container to the host
  #         - 5432:5432

  #   steps:
  #     # Downloads a copy of the code in your repository before running CI tests
  #     - name: Check out repository code
  #       uses: actions/checkout@v4

  #     # Performs a clean installation of all dependencies in the `package.json` file
  #     # For more information, see https://docs.npmjs.com/cli/ci.html
  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Connect to PostgreSQL
  #       # Runs a script that creates a PostgreSQL table, populates
  #       # the table with data, and then retrieves the data.
  #       run: node client.js
  #       # Environment variable used by the `client.js` script to create
  #       # a new PostgreSQL client.
  #       env:
  #         # The hostname used to communicate with the PostgreSQL service container
  #         POSTGRES_HOST: postgres
  #         # The default PostgreSQL port
  #         POSTGRES_PORT: 5432
